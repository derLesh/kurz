name: Deploy to VPS

on:
    push:
        branches:
            - main

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Create environment file
              run: |
                  echo "BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}" >> .env
                  echo "BETTER_AUTH_URL=${{ secrets.BETTER_AUTH_URL }}" >> .env
                  echo "TURSO_DATABASE_URL=${{ secrets.TURSO_DATABASE_URL }}" >> .env
                  echo "TURSO_AUTH_TOKEN=${{ secrets.TURSO_AUTH_TOKEN }}" >> .env
                  echo "GH_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}" >> .env
                  echo "GH_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}" >> .env
                  echo "NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}" >> .env

            - name: Build the application
              run: npm run build

            - name: Deploy to VPS
              env:
                SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
                SSH_HOST: ${{ secrets.SSH_HOST }}
                SSH_USER: ${{ secrets.SSH_USER }}
                SSH_PORT: ${{ secrets.SSH_PORT }}
              run: |
                # SSH-Verzeichnis und Schl체ssel sicher einrichten
                mkdir -p ~/.ssh
                echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa
                echo "Host deployment-target
                  HostName $SSH_HOST
                  User ${{ secrets.SSH_USER }}
                  Port $SSH_PORT
                  StrictHostKeyChecking no
                  IdentityFile ~/.ssh/id_rsa" > ~/.ssh/config                

            - name: Test SSH connection
              run: ssh deployment-target "echo 'SSH connection successful'"
    
            - name: Deploy to VPS with rsync
              run: |
                rsync -avz --delete \
                  --exclude="node_modules" \
                  --exclude=".git" \
                  --exclude=".github" \
                  --exclude=".env*" \
                  ./ deployment-target:/home/Apps/Webapps/Kurz/

            - name: Detect Node.js and PM2 paths
              id: detect_paths
              run: |
                echo "Suche nach Node.js und PM2 auf dem Server..."
                
                # npm-Pfad ermitteln
                NPM_PATH=$(ssh deployment-target "find ~/.nvm -path \"*/bin/npm\" | head -n 1")
                if [ -z "$NPM_PATH" ]; then
                  echo "WARNUNG: Konnte npm nicht finden"
                  NPM_PATH="npm"  # Fallback
                fi
                echo "npm_path=$NPM_PATH" >> $GITHUB_OUTPUT
                
                # PM2-Pfad ermitteln
                PM2_PATH=$(ssh deployment-target "find ~/.nvm -path \"*/bin/pm2\" | head -n 1")
                if [ -z "$PM2_PATH" ]; then
                  echo "PM2 nicht gefunden, versuche Installation..."
                  ssh deployment-target "export NVM_DIR=\"\$HOME/.nvm\" && . \"\$NVM_DIR/nvm.sh\" && npm install -g pm2"
                  PM2_PATH=$(ssh deployment-target "find ~/.nvm -path \"*/bin/pm2\" | head -n 1")
                  
                  if [ -z "$PM2_PATH" ]; then
                    echo "WARNUNG: PM2 konnte nicht gefunden oder installiert werden"
                    PM2_PATH="pm2"  # Fallback
                  fi
                fi

            - name: Setup application on server
              run: |
                ssh deployment-target << 'EOF'
                  # NVM-Umgebung richtig initialisieren
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                  
                  # Wichtig: Node.js Version explizit aktivieren
                  nvm use 22 || nvm use 18 || nvm use --lts || nvm use default
                  
                  # Sicherstellen dass Node.js im Pfad ist
                  NODE_PATH=$(which node)
                  if [ -z "$NODE_PATH" ]; then
                    echo "FEHLER: Node.js konnte nicht gefunden werden"
                    exit 1
                  fi
                  echo "Node.js gefunden: $NODE_PATH"
                  
                  # Zur Applikation wechseln
                  cd /home/Apps/Webapps/Kurz
                  
                  # Abh채ngigkeiten installieren
                  npm ci --production
                  
                  # Pr체fen, ob der Prozess existiert und entsprechend handeln
                  if pm2 list | grep -q "Kurz"; then
                    echo "Prozess existiert - wird neugestartet"
                    pm2 reload Kurz || pm2 restart Kurz
                  else
                    echo "Prozess existiert nicht - wird neu erstellt"
                    pm2 start npm --name "Kurz" -- start
                  fi
                  
                  pm2 save
                EOF

            - name: Verify deployment
              run: |
                ssh deployment-target << 'EOF'
                  # NVM-Umgebung auch hier initialisieren
                  export NVM_DIR="$HOME/.nvm"
                  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                  
                  # Version anzeigen und Status pr체fen
                  echo "Node.js version: $(node -v)"
                  echo "PM2 version: $(pm2 -v)"
                  
                  # Status anzeigen
                  pm2 status Kurz
                EOF

            - name: Deployment notification
              if: always()
              run: |
                if [ ${{ job.status }} == "success" ]; then
                  echo "Deployment erfolgreich abgeschlossen"
                else
                  echo "Deployment fehlgeschlagen"
                fi
    